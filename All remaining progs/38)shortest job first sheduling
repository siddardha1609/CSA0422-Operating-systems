#include <stdio.h>

struct Process {
    int processId;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
};

void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (processes[j].burstTime < processes[minIndex].burstTime) {
                minIndex = j;
            }
        }
        struct Process temp = processes[i];
        processes[i] = processes[minIndex];
        processes[minIndex] = temp;
    }
}

void calculateWaitingTime(struct Process processes[], int n) {
    processes[0].waitingTime = 0; 

    for (int i = 1; i < n; i++) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
    }
}

void calculateTurnaroundTime(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
    }
}

int main() {
    int n = 3; 
    struct Process processes[n];

    
    for (int i = 0; i < n; i++) {
        processes[i].processId = i;
        printf("Enter the burst time for process %d: ", i);
        scanf("%d", &processes[i].burstTime);
    }

    sortProcesses(processes, n);
    calculateWaitingTime(processes, n);
    calculateTurnaroundTime(processes, n);
    float averageWaitingTime = 0;
    float averageTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        averageWaitingTime += processes[i].waitingTime;
        averageTurnaroundTime += processes[i].turnaroundTime;
    }
    averageWaitingTime /= n;
    averageTurnaroundTime /= n;
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].processId, processes[i].burstTime,
            processes[i].waitingTime, processes[i].turnaroundTime);
    }
    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);

    return 0;
}
